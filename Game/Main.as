package Game{	import flash.display.MovieClip;	import flash.display.Stage;	import flash.display.StageScaleMode;	import flash.display.BitmapData;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.ProgressEvent;	import flash.events.IOErrorEvent;	import flash.geom.Rectangle;	import flash.net.navigateToURL;	import flash.net.URLRequest;	import Playtomic.Log;	import Playtomic.GameVars;	import Playtomic.Response;	public final class Main extends MovieClip	{		public static var STAGE:Stage;				public static var MAIN:Main;		public static var MS:MovieClip;			public function Main()		{			addEventListener(Event.ADDED_TO_STAGE, initialize, false, 0, true);		}		private function initialize(e:Event):void		{			STAGE = stage;			MAIN = this;						// Log our view and initialize the API			Log.View(5329, "402e308d43a94bb0", "bd197da4d36d4199a8766d807f3055", root.loaderInfo.loaderURL);			// Here we load in our balancing variables 			GameVars.Load(gameVarsLoaded);			scrollRect = new Rectangle(0, 0, 600, 400);						gotoAndStop(1);						stage.scaleMode = StageScaleMode.EXACT_FIT;						loaderInfo.addEventListener(IOErrorEvent.IO_ERROR, error, false, 0, true);			loaderInfo.addEventListener(ProgressEvent.PROGRESS, progress, false, 0, true);			loaderInfo.addEventListener(Event.COMPLETE, loaded, false, 0, true);		}				// Update our balancing variables with the latest version		private function gameVarsLoaded(gamevars:Object, response:Response):void		{			if(response.Success)			{				Wave.BaseHitPoints = gamevars.BaseHitPoints;				Wave.BaseMoney = gamevars.BaseMoney;						Wave.IncreaseHitPoints = gamevars.IncreaseHitPoints;				Wave.IncreaseMoney = gamevars.IncreaseMoney;								Wave.SpawnerHealthOffset = gamevars.SpawnerHealthOffset;				Wave.FlierHealthOffset = gamevars.FlierHealthOffset;						Wave.BossHealthOffset = gamevars.BossHealthOffset;				Wave.BossMoneyOffset = gamevars.BossMoneyOffset;			}			else			{				trace("GameVars failed: " + response.ErrorMessage);			}		}				private function error(e:IOErrorEvent):void		{		}				private function progress(e:ProgressEvent):void		{			var done:Number = loaderInfo.bytesLoaded;			var total:Number = loaderInfo.bytesTotal;			var w:int = (done / total) * 214;						loading.cover.width = 214 - w;			loading.cover.x = 217 - loading.cover.width;		}				private function loaded(e:Event):void		{					gotoAndStop(4);					InitializeManager.process();								addChild(new Menu(Screenshot.create()));		}	}}
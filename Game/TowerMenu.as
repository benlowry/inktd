package Game{	import flash.display.Sprite;	import flash.display.Bitmap;		import flash.display.BitmapData;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.display.MovieClip;	import flash.ui.Mouse;	import Assets.Checkboxes;	import Playtomic.Log;	public final class TowerMenu extends Sprite	{		private static var BlueCheckbox:BitmapData;				private static var RedCheckbox:BitmapData;		private static var BlackCheckbox:BitmapData;		private static var GreenCheckbox:BitmapData;				public var viewing:Tower;		public var w:Game.World;		public var desc:String;		public var previousLevel:int;		public var previousRange:int;		public var previousKills:int;		public var previousSpeed:int;		public var previousDamage:int;				public static function initialize():void		{			var checkboxes:BitmapData = new Assets.Checkboxes(92, 44);			var copyrect:Rectangle = new Rectangle(0, 0, 0, 0);			var zeropoint:Point = new Point(0, 0);			// blue			copyrect.width = 23;			copyrect.height = 44;						BlueCheckbox = new BitmapData(23, 44, true, 0x00000000);			BlueCheckbox.copyPixels(checkboxes, copyrect, zeropoint, null, null, true);						// red			copyrect.x = 23;			RedCheckbox = new BitmapData(23, 44, true, 0x00000000);			RedCheckbox.copyPixels(checkboxes, copyrect, zeropoint, null, null, true);						// black			copyrect.x = 46;			BlackCheckbox = new BitmapData(23, 44, true, 0x00000000);			BlackCheckbox.copyPixels(checkboxes, copyrect, zeropoint, null, null, true);						// green			copyrect.x = 69;			GreenCheckbox = new BitmapData(23, 44, true, 0x00000000);			GreenCheckbox.copyPixels(checkboxes, copyrect, zeropoint, null, null, true);		}				public function TowerMenu()		{			// colors			blue.label.text = "B";			blue.background.bitmapData = BlueCheckbox;			blue.addEventListener(MouseEvent.CLICK, setColorMode, false, 0, true);						red.label.text = "R";			red.background.bitmapData = RedCheckbox;			red.textColor = 0x990000;			red.addEventListener(MouseEvent.CLICK, setColorMode, false, 0, true);			black.label.text = "K";			black.background.bitmapData = BlackCheckbox;			black.textColor = 0x000000			black.addEventListener(MouseEvent.CLICK, setColorMode, false, 0, true);						green.label.text = "G";			green.background.bitmapData = GreenCheckbox;			green.textColor = 0x339933;			green.addEventListener(MouseEvent.CLICK, setColorMode, false, 0, true);						// targeting modes			automatic.label.text = "A";			automatic.background.bitmapData = BlueCheckbox;			automatic.addEventListener(MouseEvent.CLICK, setTargetingMode, false, 0, true);			automatic.addEventListener(MouseEvent.MOUSE_OVER, showTargetingMode, false, 0, true);			automatic.addEventListener(MouseEvent.MOUSE_OUT, hideTargetingMode, false, 0, true);						nearest.label.text = "N";			nearest.background.bitmapData = BlueCheckbox;			nearest.addEventListener(MouseEvent.CLICK, setTargetingMode, false, 0, true);			nearest.addEventListener(MouseEvent.MOUSE_OVER, showTargetingMode, false, 0, true);			nearest.addEventListener(MouseEvent.MOUSE_OUT, hideTargetingMode, false, 0, true);						furthest.label.text = "F";			furthest.background.bitmapData = BlueCheckbox;			furthest.addEventListener(MouseEvent.CLICK, setTargetingMode, false, 0, true);			furthest.addEventListener(MouseEvent.MOUSE_OVER, showTargetingMode, false, 0, true);			furthest.addEventListener(MouseEvent.MOUSE_OUT, hideTargetingMode, false, 0, true);						weakest.label.text = "W";			weakest.background.bitmapData = BlueCheckbox;			weakest.addEventListener(MouseEvent.CLICK, setTargetingMode, false, 0, true);			weakest.addEventListener(MouseEvent.MOUSE_OVER, showTargetingMode, false, 0, true);			weakest.addEventListener(MouseEvent.MOUSE_OUT, hideTargetingMode, false, 0, true);						strongest.label.text = "S";			strongest.background.bitmapData = BlueCheckbox;			strongest.addEventListener(MouseEvent.CLICK, setTargetingMode, false, 0, true);			strongest.addEventListener(MouseEvent.MOUSE_OVER, showTargetingMode, false, 0, true);			strongest.addEventListener(MouseEvent.MOUSE_OUT, hideTargetingMode, false, 0, true);						// options			sellButton.addEventListener(MouseEvent.CLICK, sell);			upgradeButton.addEventListener(MouseEvent.MOUSE_OVER, showUpgrade, false, 0, true);			upgradeButton.addEventListener(MouseEvent.MOUSE_OUT, clearUpgrade, false, 0, true);			upgradeButton.addEventListener(MouseEvent.CLICK, upgrade, false, 0, true);		}				private function showUpgrade(e:MouseEvent):void		{			if(viewing.level == 5)				return;							range.text = viewing.range.toString() + " +" + Math.ceil(viewing.range / (4 + (2 * viewing.level)));			speed.gotoAndStop(calculateSpeed(viewing.speed - Math.ceil(viewing.speed / (10 + (2 * viewing.level)))));			damage.text = viewing.damage.toString() + (viewing.type != 5 && viewing.type != 6 ? " +" + Math.ceil(viewing.damage / 4)  : "");		}				private function clearUpgrade(e:MouseEvent):void		{			if(viewing.level == 5)				return;							range.text = viewing.range.toString();			speed.gotoAndStop(calculateSpeed(viewing.speed));			damage.text = viewing.damage.toString();		}				private function upgrade(e:MouseEvent):void		{			var price:int = int((viewing.config.price * viewing.level) / 4);						if(viewing.level == 5 || w.money < price)				return;							// Here we use a ranged level metric to count how many upgrades occur for each type of tower			Log.LevelRangedMetric("tower_upgrades", w.waveNumber, viewing.type);							w.textBlocks.push(FadingTextPiece.create("-" + price, viewing.x, viewing.y, viewing.color));			viewing.damage += viewing.type != 5 && viewing.type != 6 ? Math.ceil(viewing.damage / 4) : 0;			viewing.range += Math.ceil(viewing.range / (4 + (2 * viewing.level)));			viewing.speed -= Math.ceil(viewing.speed / (10 + (2 * viewing.level)));			viewing.gridRange = Math.ceil(viewing.range / 20);			viewing.level++;						viewing.spent += price;						w.updateMoney(-price);			viewing = null;			update(w);						w.radius2.width = viewing.range * 2;			w.radius2.height = viewing.range * 2;			w.radius2.x = viewing.centerX + 10;			w.radius2.y = viewing.centerY + 10;		}				private function sell(e:MouseEvent):void		{			w.remove(viewing);			w.highlight.visible = false;			w.radius2.visible = false;			w.selected.visible = false;			viewing = null;					}				private function showTargetingMode(e:MouseEvent):void		{			targetingMode.text = (e.target as MovieClip).name;		}				private function hideTargetingMode(e:MouseEvent):void		{			switch(viewing.targetingMode)			{				case TargetModes.Automatic:					targetingMode.text = "Automatic";					return;								case TargetModes.Nearest:					targetingMode.text = "Nearest";					return;								case TargetModes.Furthest:					targetingMode.text = "Furthest";					return;												case TargetModes.Weakest:					targetingMode.text = "Weakest";					return;												case TargetModes.Strongest:					targetingMode.text = "Strongest";					return;							}		}				private function setTargetingMode(e:MouseEvent):void		{			switch((e.target as MovieClip).name)			{				case "Automatic":					viewing.targetingMode = TargetModes.Automatic;					break;									case "Nearest":					viewing.targetingMode = TargetModes.Nearest;					break;									case "Furthest":					viewing.targetingMode = TargetModes.Furthest;					break;									case "Weakest":					viewing.targetingMode = TargetModes.Weakest;					break;									case "Strongest":					viewing.targetingMode = TargetModes.Strongest;					break;							}						automatic.set(viewing.targetingMode == 0);			nearest.set(viewing.targetingMode == 1);			furthest.set(viewing.targetingMode == 2);			weakest.set(viewing.targetingMode == 3);			strongest.set(viewing.targetingMode == 4);		}				private function setColorMode(e:MouseEvent):void		{			if(w.money < 10 || viewing.type == 8)				return;			var color:String = (e.target as MovieClip).name;			var c:uint;			var mc:int;						switch(color)			{				case "blue":					c = ColorModes.Blue;					mc = 0;					break;									case "red":					c = ColorModes.Red;					mc = 1;					break;									case "black":					c = ColorModes.Black;					mc = 2;					break;									case "green":					c = ColorModes.Green;					mc = 3;					break;			}			if(viewing.color == c)				return;							viewing.setColor(c);			w.updateMoney(-10);			w.textBlocks.push(FadingTextPiece.create("-10", viewing.x, viewing.y, c));			w.selected.gotoAndStop(mc + 1);			w.radius.gotoAndStop(mc + 1);			w.radius2.gotoAndStop(mc + 1);			blue.set(viewing.color == ColorModes.Blue);			red.set(viewing.color == ColorModes.Red);			black.set(viewing.color == ColorModes.Black);			green.set(viewing.color == ColorModes.Green);		}				public function update(world:Game.World):void		{			w = world;						// full update			if(viewing == null || viewing != world.viewing)			{				viewing = world.viewing;				desc = world.viewing.config.description;								title.text = "Level " + viewing.level + " \"" + desc + "\"";				kills.text = viewing.kills.toString();				range.text = viewing.range.toString();				speed.gotoAndStop(calculateSpeed(viewing.speed));				damage.text = viewing.damage.toString();								previousLevel = viewing.level;				previousRange = viewing.range;				previousKills = viewing.kills;				previousSpeed = viewing.speed;				previousDamage = viewing.damage;								automatic.set(viewing.targetingMode == 0);				nearest.set(viewing.targetingMode == 1);				furthest.set(viewing.targetingMode == 2);				weakest.set(viewing.targetingMode == 3);				strongest.set(viewing.targetingMode == 4);								if(viewing.type < 8)				{					blue.set(viewing.color == ColorModes.Blue);					red.set(viewing.color == ColorModes.Red);					black.set(viewing.color == ColorModes.Black);					green.set(viewing.color == ColorModes.Green);				}				else				{					blue.set(true);					red.set(true);					black.set(true);					green.set(true);				}								if(viewing.level < 5)				{					upgradeButton.label.text = "$" + int((viewing.config.price * viewing.level) / 4) + " upgrade";					upgradeButton.alpha = 1;					upgradeButton.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT));				}				else if(viewing.level == 5)				{					upgradeButton.label.text = "n/a upgrade";					upgradeButton.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT))					upgradeButton.alpha = 0.5;									}								sellButton.label.text = "$" + int(viewing.spent / 2) + " sell";				hideTargetingMode(null);				return;			}						// partial update			if(previousLevel != viewing.level)			{				title.text = "Level " + viewing.level + " \"" + desc + "\"";				previousLevel = viewing.level;			}						if(previousKills != viewing.kills)			{				kills.text = viewing.kills.toString();				previousKills = viewing.kills;			}						if(previousRange != viewing.range)			{				range.text = viewing.range.toString();				previousRange = viewing.range;			}						if(previousSpeed != viewing.speed)			{				speed.gotoAndStop(calculateSpeed(viewing.speed));				previousSpeed = viewing.speed;			}						if(previousDamage != viewing.damage)			{				damage.text = viewing.damage.toString();				previousDamage = viewing.damage;			}						if(viewing.level < 5 && upgradeButton.alpha < 1)			{				upgradeButton.label.text = "$" + (viewing.level * 10) + " upgrade";				upgradeButton.alpha = 1;								upgradeButton.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT));							}			else if(viewing.level == 5 && upgradeButton.alpha == 1)			{				upgradeButton.label.text = "n/a upgrade";				upgradeButton.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT))				upgradeButton.alpha = 0.5;							}						hideTargetingMode(null);		}				private function calculateSpeed(speed:int):int		{			if(speed < 22)				return 6;						if(speed < 27)				return 5;							if(speed < 32)				return 4;						if(speed < 37)				return 3;							if(speed < 42)				return 2;							else				return 1;		}	}}